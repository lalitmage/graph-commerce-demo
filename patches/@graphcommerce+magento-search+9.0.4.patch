diff --git a/node_modules/@graphcommerce/magento-search/CategorySearch.gql.ts b/node_modules/@graphcommerce/magento-search/CategorySearch.gql.ts
new file mode 100644
index 0000000..4443622
--- /dev/null
+++ b/node_modules/@graphcommerce/magento-search/CategorySearch.gql.ts
@@ -0,0 +1,13 @@
+/* eslint-disable */
+import * as Types from '@graphcommerce/graphql-mesh/.mesh';
+
+import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
+
+export const CategorySearchDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CategorySearch"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"10"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"defaultValue":{"kind":"StringValue","value":"","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"categories"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filters"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"match"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"pageSize"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"uid"}},{"kind":"Field","name":{"kind":"Name","value":"url_path"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CategoryInterface"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"include_in_menu"}},{"kind":"Field","name":{"kind":"Name","value":"breadcrumbs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"category_uid"}},{"kind":"Field","name":{"kind":"Name","value":"category_name"}},{"kind":"Field","name":{"kind":"Name","value":"category_url_path"}},{"kind":"Field","name":{"kind":"Name","value":"category_level"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<CategorySearchQuery, CategorySearchQueryVariables>;
+export type CategorySearchQueryVariables = Types.Exact<{
+  pageSize?: Types.InputMaybe<Types.Scalars['Int']['input']>;
+  search?: Types.InputMaybe<Types.Scalars['String']['input']>;
+}>;
+
+
+export type CategorySearchQuery = { categories?: { items?: Array<{ include_in_menu?: number | null, uid: string, url_path?: string | null, name?: string | null, breadcrumbs?: Array<{ category_uid: string, category_name?: string | null, category_url_path?: string | null, category_level?: number | null } | null> | null } | null> | null } | null };
diff --git a/node_modules/@graphcommerce/magento-search/components/CategorySearchResult/CategorySearchResult.gql.ts b/node_modules/@graphcommerce/magento-search/components/CategorySearchResult/CategorySearchResult.gql.ts
new file mode 100644
index 0000000..705b087
--- /dev/null
+++ b/node_modules/@graphcommerce/magento-search/components/CategorySearchResult/CategorySearchResult.gql.ts
@@ -0,0 +1,4 @@
+/* eslint-disable */
+import * as Types from '@graphcommerce/graphql-mesh/.mesh';
+
+export type CategorySearchResultFragment = { uid: string, url_path?: string | null, name?: string | null, include_in_menu?: number | null, breadcrumbs?: Array<{ category_uid: string, category_name?: string | null, category_url_path?: string | null, category_level?: number | null } | null> | null };
diff --git a/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/SearchField.tsx b/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/SearchField.tsx
index e2e243d..ffb63af 100644
--- a/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/SearchField.tsx
+++ b/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/SearchField.tsx
@@ -2,9 +2,8 @@ import { iconSearch, IconSvg, showPageLoadIndicator } from '@graphcommerce/next-
 import type { FabProps } from '@mui/material'
 import { Fab } from '@mui/material'
 import dynamic from 'next/dynamic'
-import { useMemo, useState } from 'react'
+import { useEffect } from 'react'
 import type { ProductFiltersProSearchInputProps } from './ProductFiltersProSearchInput'
-import { useSearchPageAndParam } from './useSearchPageAndParam'
 
 export type SearchFieldProps = ProductFiltersProSearchInputProps & {
   fab?: FabProps
@@ -17,44 +16,38 @@ const ProductFiltersProSearchInputLazy = dynamic(
 )
 
 export function SearchField(props: SearchFieldProps) {
-  const { fab, formControl, visible: incomingVisible } = props
+  const { fab, formControl } = props
 
-  const [searchPage] = useSearchPageAndParam()
-  const [expanded, setExpanded] = useState(searchPage)
-  useMemo(() => {
-    if (!searchPage) setExpanded(searchPage)
-  }, [searchPage])
-
-  const visible = incomingVisible || expanded || searchPage
+  useEffect(() => {
+    // Ensure the search field is focused when the component mounts
+    setTimeout(() => {
+      document.querySelector<HTMLInputElement>('input')?.focus()
+    }, 100)
+  }, [])
 
   return (
     <>
-      {visible && (
-        <ProductFiltersProSearchInputLazy
-          {...props}
-          formControl={formControl}
-          inputRef={(element: HTMLInputElement) => element?.focus()}
-          // autoFocus
-          buttonProps={{
-            onClick: () => {
-              setExpanded(false)
-            },
-          }}
-          onBlur={() => {
-            if (!searchPage && !showPageLoadIndicator.get()) setExpanded(false)
-          }}
-        />
-      )}
+      {/* Search Field Always Visible */}
+      <ProductFiltersProSearchInputLazy
+        {...props}
+        formControl={formControl}
+        inputRef={(element: HTMLInputElement) => element?.focus()}
+        onBlur={(event) => {
+          event.preventDefault()
+          event.stopPropagation() // Prevent closing on blur
+        }}
+      />
+
+      {/* Search Icon (Still Present) */}
       <Fab
         onClick={() => {
-          setExpanded(true)
-          // inputRef.current?.focus()
+          document.querySelector<HTMLInputElement>('input')?.focus()
         }}
         color='inherit'
         size='large'
         {...fab}
         sx={[
-          { display: { xs: visible ? 'none' : 'inline-flex' } },
+          { display: { xs: 'inline-flex' } },
           ...(Array.isArray(fab?.sx) ? fab.sx : [fab?.sx]),
         ]}
       >
@@ -63,3 +56,82 @@ export function SearchField(props: SearchFieldProps) {
     </>
   )
 }
+
+
+
+
+
+
+
+
+
+
+//original code 
+
+
+
+// import { iconSearch, IconSvg, showPageLoadIndicator } from '@graphcommerce/next-ui'
+// import type { FabProps } from '@mui/material'
+// import { Fab } from '@mui/material'
+// import dynamic from 'next/dynamic'
+// import { useMemo, useState } from 'react'
+// import type { ProductFiltersProSearchInputProps } from './ProductFiltersProSearchInput'
+// import { useSearchPageAndParam } from './useSearchPageAndParam'
+
+// export type SearchFieldProps = ProductFiltersProSearchInputProps & {
+//   fab?: FabProps
+//   visible?: boolean
+//   searchField?: Record<string, unknown>
+// }
+
+// const ProductFiltersProSearchInputLazy = dynamic(
+//   async () => (await import('./ProductFiltersProSearchInput')).ProductFiltersProSearchOutlinedInput,
+// )
+
+// export function SearchField(props: SearchFieldProps) {
+//   const { fab, formControl, visible: incomingVisible } = props
+
+//   const [searchPage] = useSearchPageAndParam()
+//   const [expanded, setExpanded] = useState(searchPage)
+//   useMemo(() => {
+//     if (!searchPage) setExpanded(searchPage)
+//   }, [searchPage])
+
+//   const visible = incomingVisible || expanded || searchPage
+
+//   return (
+//     <>
+//       {visible && (
+//         <ProductFiltersProSearchInputLazy
+//           {...props}
+//           formControl={formControl}
+//           inputRef={(element: HTMLInputElement) => element?.focus()}
+//           // autoFocus
+//           buttonProps={{
+//             onClick: () => {
+//               setExpanded(false)
+//             },
+//           }}
+//           onBlur={() => {
+//             if (!searchPage && !showPageLoadIndicator.get()) setExpanded(false)
+//           }}
+//         />
+//       )}
+//       <Fab
+//         onClick={() => {
+//           setExpanded(true)
+//           // inputRef.current?.focus()
+//         }}
+//         color='inherit'
+//         size='large'
+//         {...fab}
+//         sx={[
+//           { display: { xs: visible ? 'none' : 'inline-flex' } },
+//           ...(Array.isArray(fab?.sx) ? fab.sx : [fab?.sx]),
+//         ]}
+//       >
+//         <IconSvg src={iconSearch} size='large' />
+//       </Fab>
+//     </>
+//   )
+// }
