diff --git a/node_modules/@graphcommerce/magento-search/CategorySearch.gql.ts b/node_modules/@graphcommerce/magento-search/CategorySearch.gql.ts
new file mode 100644
index 0000000..4443622
--- /dev/null
+++ b/node_modules/@graphcommerce/magento-search/CategorySearch.gql.ts
@@ -0,0 +1,13 @@
+/* eslint-disable */
+import * as Types from '@graphcommerce/graphql-mesh/.mesh';
+
+import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
+
+export const CategorySearchDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CategorySearch"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"10"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"defaultValue":{"kind":"StringValue","value":"","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"categories"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filters"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"match"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"pageSize"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pageSize"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"uid"}},{"kind":"Field","name":{"kind":"Name","value":"url_path"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CategoryInterface"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"include_in_menu"}},{"kind":"Field","name":{"kind":"Name","value":"breadcrumbs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"category_uid"}},{"kind":"Field","name":{"kind":"Name","value":"category_name"}},{"kind":"Field","name":{"kind":"Name","value":"category_url_path"}},{"kind":"Field","name":{"kind":"Name","value":"category_level"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<CategorySearchQuery, CategorySearchQueryVariables>;
+export type CategorySearchQueryVariables = Types.Exact<{
+  pageSize?: Types.InputMaybe<Types.Scalars['Int']['input']>;
+  search?: Types.InputMaybe<Types.Scalars['String']['input']>;
+}>;
+
+
+export type CategorySearchQuery = { categories?: { items?: Array<{ include_in_menu?: number | null, uid: string, url_path?: string | null, name?: string | null, breadcrumbs?: Array<{ category_uid: string, category_name?: string | null, category_url_path?: string | null, category_level?: number | null } | null> | null } | null> | null } | null };
diff --git a/node_modules/@graphcommerce/magento-search/components/CategorySearchResult/CategorySearchResult.gql.ts b/node_modules/@graphcommerce/magento-search/components/CategorySearchResult/CategorySearchResult.gql.ts
new file mode 100644
index 0000000..705b087
--- /dev/null
+++ b/node_modules/@graphcommerce/magento-search/components/CategorySearchResult/CategorySearchResult.gql.ts
@@ -0,0 +1,4 @@
+/* eslint-disable */
+import * as Types from '@graphcommerce/graphql-mesh/.mesh';
+
+export type CategorySearchResultFragment = { uid: string, url_path?: string | null, name?: string | null, include_in_menu?: number | null, breadcrumbs?: Array<{ category_uid: string, category_name?: string | null, category_url_path?: string | null, category_level?: number | null } | null> | null };
diff --git a/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/ProductFiltersProSearchInput.tsx b/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/ProductFiltersProSearchInput.tsx
index 1368a0c..9fcd4d3 100644
--- a/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/ProductFiltersProSearchInput.tsx
+++ b/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/ProductFiltersProSearchInput.tsx
@@ -108,11 +108,11 @@ export function ProductFiltersProSearchOutlinedInput(props: ProductFiltersProSea
       <OutlinedInput
         color='primary'
         size={size}
-        endAdornment={
-          <IconButton color='inherit' size='small' {...buttonProps}>
-            <IconSvg src={iconClose} size='large' />
-          </IconButton>
-        }
+        // endAdornment={
+        //   <IconButton color='inherit' size='small' {...buttonProps}>
+        //     <IconSvg src={iconClose} size='large' />
+        //   </IconButton>
+        // }
         {...rest}
       />
     </FormControl>
diff --git a/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/SearchField.tsx b/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/SearchField.tsx
index e2e243d..6b18444 100644
--- a/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/SearchField.tsx
+++ b/node_modules/@graphcommerce/magento-search/components/ProductFiltersPro/SearchField.tsx
@@ -1,10 +1,14 @@
-import { iconSearch, IconSvg, showPageLoadIndicator } from '@graphcommerce/next-ui'
+import { iconSearch, IconSvg } from '@graphcommerce/next-ui'
 import type { FabProps } from '@mui/material'
-import { Fab } from '@mui/material'
+import { Box, MenuItem, Select } from '@mui/material'
 import dynamic from 'next/dynamic'
 import { useMemo, useState } from 'react'
 import type { ProductFiltersProSearchInputProps } from './ProductFiltersProSearchInput'
 import { useSearchPageAndParam } from './useSearchPageAndParam'
+import { GetCategoriesDocument, GetCategoriesQuery } from '../../../../../components/CustomCode/GraphqlQuries/AllCategories.gql' 
+import { useQuery } from '@graphcommerce/graphql'
+import { useRef } from 'react'
+
 
 export type SearchFieldProps = ProductFiltersProSearchInputProps & {
   fab?: FabProps
@@ -25,41 +29,232 @@ export function SearchField(props: SearchFieldProps) {
     if (!searchPage) setExpanded(searchPage)
   }, [searchPage])
 
-  const visible = incomingVisible || expanded || searchPage
+  const visible = incomingVisible ?? true
+
+
+
+
+  function flattenCategories(items: NonNullable<GetCategoriesQuery['categories']>['items'] = []) {
+  const flat: { uid: string; name: string }[] = []
+
+  const walk = (nodes: typeof items) => {
+    for (const node of nodes || []) {
+      if (node?.name && node.uid) {
+        flat.push({ uid: node.uid, name: node.name })
+      }
+      if (node?.children) walk(node.children)
+    }
+  }
+
+  walk(items)
+  return flat
+}
+
+
+const [selectedCategory, setSelectedCategory] = useState('all')
+
+  const { data } = useQuery(GetCategoriesDocument)
+const categoryList = flattenCategories(data?.categories?.items)
+
+const selectRef = useRef<HTMLDivElement | null>(null)
+// const anchorRef = useRef<HTMLDivElement>(null)
+
+
+
+
 
   return (
-    <>
-      {visible && (
+    <Box
+      sx={{
+        display: 'flex',
+        alignItems: 'center',
+        border: '1px solid #d9d9d9',
+        borderRadius: '40px',
+        overflow: 'hidden',
+        height: 48,
+        maxWidth: 600,
+        width: '100%',
+        backgroundColor: '#fff',
+        boxShadow: '0px 1px 2px rgba(0,0,0,0.05)',
+      }}
+    >
+      {/* Section 1: Search Input (60%) */}
+      <Box sx={{ width: '50%', pl: 2 }}>
         <ProductFiltersProSearchInputLazy
           {...props}
           formControl={formControl}
           inputRef={(element: HTMLInputElement) => element?.focus()}
-          // autoFocus
           buttonProps={{
-            onClick: () => {
-              setExpanded(false)
-            },
+            onClick: () => setExpanded(false),
           }}
           onBlur={() => {
-            if (!searchPage && !showPageLoadIndicator.get()) setExpanded(false)
+            if (!searchPage) setExpanded(false)
+          }}
+          sx={{
+            '& .MuiOutlinedInput-notchedOutline': {
+              border: 'none',
+            },
+            '& .MuiOutlinedInput-root': {
+              paddingRight: 0,
+              height: 48,
+            },
+            '& input': {
+              padding: '0 8px',
+              fontSize: '15px',
+            },
           }}
         />
-      )}
-      <Fab
-        onClick={() => {
-          setExpanded(true)
-          // inputRef.current?.focus()
+      </Box>
+
+      {/* Section 2: Category Dropdown (25%) */}
+
+
+<Select
+  value={selectedCategory}
+  onChange={(e) => setSelectedCategory(e.target.value)}
+  variant='standard'
+  disableUnderline
+  inputRef={selectRef}
+  displayEmpty
+  renderValue={(selected) => {
+    if (selected === 'all') return 'All Categories'
+    return categoryList.find(cat => cat.uid === selected)?.name || ''
+  }}
+  MenuProps={{
+    anchorOrigin: {
+      vertical: 'bottom',
+      horizontal: 'left',
+    },
+    transformOrigin: {
+      vertical: 'top',
+      horizontal: 'left',
+    },
+    container: () => selectRef.current?.parentElement || null, // avoid error by not returning null
+    PaperProps: {
+      sx: {
+        mt: '4px',
+        borderRadius: '8px',
+        boxShadow: 3,
+        maxHeight: 600,
+        overflowY: 'auto',
+      },
+    },
+  }}
+  sx={{
+    width: '35%',
+    px: 2,
+    fontSize: '10px',
+    height: '100%',
+    '& .MuiSelect-select': {
+      display: 'flex',
+      alignItems: 'center',
+      height: '100%',
+    },
+    borderLeft: '1px solid #ccc',
+  }}
+>
+  {categoryList
+    .filter(cat => cat.uid !== 'all') // don't render All Categories in dropdown
+    .map((cat) => (
+      <MenuItem key={cat.uid} value={cat.uid}>
+        {cat.name}
+      </MenuItem>
+    ))}
+</Select>
+
+
+      {/* Section 3: Yellow Icon (15%) */}
+      <Box
+        sx={{
+          width: '15%',
+          minWidth: 50,
+          backgroundColor: '#FDB924',
+          height: '100%',
+          display: 'flex',
+          alignItems: 'center',
+          justifyContent: 'center',
+          borderTopRightRadius: '40px',
+          borderBottomRightRadius: '40px',
         }}
-        color='inherit'
-        size='large'
-        {...fab}
-        sx={[
-          { display: { xs: visible ? 'none' : 'inline-flex' } },
-          ...(Array.isArray(fab?.sx) ? fab.sx : [fab?.sx]),
-        ]}
       >
-        <IconSvg src={iconSearch} size='large' />
-      </Fab>
-    </>
+        <IconSvg src={iconSearch} size='medium' sx={{ color: 'white' }} />
+      </Box>
+    </Box>
   )
 }
+
+
+
+
+
+
+
+//original code 
+
+
+
+// import { iconSearch, IconSvg, showPageLoadIndicator } from '@graphcommerce/next-ui'
+// import type { FabProps } from '@mui/material'
+// import { Fab } from '@mui/material'
+// import dynamic from 'next/dynamic'
+// import { useMemo, useState } from 'react'
+// import type { ProductFiltersProSearchInputProps } from './ProductFiltersProSearchInput'
+// import { useSearchPageAndParam } from './useSearchPageAndParam'
+
+// export type SearchFieldProps = ProductFiltersProSearchInputProps & {
+//   fab?: FabProps
+//   visible?: boolean
+//   searchField?: Record<string, unknown>
+// }
+
+// const ProductFiltersProSearchInputLazy = dynamic(
+//   async () => (await import('./ProductFiltersProSearchInput')).ProductFiltersProSearchOutlinedInput,
+// )
+
+// export function SearchField(props: SearchFieldProps) {
+//   const { fab, formControl, visible: incomingVisible } = props
+
+//   const [searchPage] = useSearchPageAndParam()
+//   const [expanded, setExpanded] = useState(searchPage)
+//   useMemo(() => {
+//     if (!searchPage) setExpanded(searchPage)
+//   }, [searchPage])
+
+//   const visible = incomingVisible || expanded || searchPage
+
+//   return (
+//     <>
+//       {visible && (
+//         <ProductFiltersProSearchInputLazy
+//           {...props}
+//           formControl={formControl}
+//           inputRef={(element: HTMLInputElement) => element?.focus()}
+//           // autoFocus
+//           buttonProps={{
+//             onClick: () => {
+//               setExpanded(false)
+//             },
+//           }}
+//           onBlur={() => {
+//             if (!searchPage && !showPageLoadIndicator.get()) setExpanded(false)
+//           }}
+//         />
+//       )}
+//       <Fab
+//         onClick={() => {
+//           setExpanded(true)
+//           // inputRef.current?.focus()
+//         }}
+//         color='inherit'
+//         size='large'
+//         {...fab}
+//         sx={[
+//           { display: { xs: visible ? 'none' : 'inline-flex' } },
+//           ...(Array.isArray(fab?.sx) ? fab.sx : [fab?.sx]),
+//         ]}
+//       >
+//         <IconSvg src={iconSearch} size='large' />
+//       </Fab>
+//     </>
+//   )
+// }
